# Generated by Django 5.1.11 on 2025-09-13 11:25

import django.db.models.deletion
import django.db.models.functions.text
import django.db.models.lookups
import mptt.fields
import tinymce.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Tariff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position_number', models.CharField(blank=True, help_text='Position Number', max_length=12, null=True, verbose_name='Position Number')),
                ('item_definition', models.CharField(help_text='Item Definition', max_length=500, verbose_name='Definition')),
                ('item_type', models.GeneratedField(db_persist=True, expression=models.Case(models.When(django.db.models.lookups.Exact(django.db.models.functions.text.Length(models.F('position_number')), 1), then=models.Value('section')), models.When(django.db.models.lookups.Exact(django.db.models.functions.text.Length(models.F('position_number')), 2), then=models.Value('chapter')), models.When(django.db.models.lookups.Exact(django.db.models.functions.text.Length(models.F('position_number')), 4), then=models.Value('position')), models.When(django.db.models.lookups.Exact(django.db.models.functions.text.Length(models.F('position_number')), 6), then=models.Value('subposition')), models.When(django.db.models.lookups.Exact(django.db.models.functions.text.Length(models.F('position_number')), 8), then=models.Value('combinenom')), models.When(django.db.models.lookups.Exact(django.db.models.functions.text.Length(models.F('position_number')), 10), then=models.Value('national')), models.When(django.db.models.lookups.Exact(django.db.models.functions.text.Length(models.F('position_number')), 12), then=models.Value('stats')), default=models.Value('nan'), output_field=models.CharField(choices=[('section', 'Bölüm'), ('chapter', 'Fasıl'), ('position', 'Pozisyon'), ('subposition', 'Alt Pozisyon : AS Nomanklatüre Kod'), ('combinenom', 'Kombine Nomanklatüre Kod'), ('national', 'Milli Alt Açılım Kodu'), ('stats', 'İstatistik Kod'), ('nan', 'Not Selected')], max_length=50)), output_field=models.CharField(choices=[('section', 'Bölüm'), ('chapter', 'Fasıl'), ('position', 'Pozisyon'), ('subposition', 'Alt Pozisyon : AS Nomanklatüre Kod'), ('combinenom', 'Kombine Nomanklatüre Kod'), ('national', 'Milli Alt Açılım Kodu'), ('stats', 'İstatistik Kod'), ('nan', 'Not Selected')], max_length=50))),
                ('notes', tinymce.models.HTMLField(blank=True, help_text='Item notes', null=True, verbose_name='Notes')),
                ('metric_unit', models.CharField(choices=[('GT', 'Gross ton'), ('c/k', 'Karat (1 metrik karat=2*10-4 kg)'), ('ce/el', 'Hücre adedi'), ('ct/l', 'Ton başına taşıma kapasitesi(1)'), ('g', 'Gram'), ('gi F/S', 'Gram olarak fissile izotop '), ('kg H2O2', 'Kilogram olarak Hidrojen peroksit'), ('kg K2O', 'Kilogram olarak Potasyum oksit '), ('kg KOH', 'Kilogram olarak Potasyum hidroksit (kostik potas) '), ('kg met.am.', 'Kilogram olarak Metil aminler '), ('kg N', 'Kilogram olarak Azot'), ('Kg NaOH', 'Kilogram olarak Sodyum hidroksit (kostik soda)'), ('kg/net eda', 'Kilogram olarak kurutulmuş net ağırlık'), ('kg P2O5', 'Kilogram olarak Difosfor pentaoksit '), ('kg %90 sdt', 'Kilogram olarak % 90 kuru ürün'), ('kg U', 'Kilogram olarak Uranyum'), ('1000 kWh', '1000 kilovat saat'), ('l', 'Litre'), ('Kg C5H14CINO', 'Kilogram olarak Kolin klorür'), ('l alc. %100', 'Litre olarak saf alkol (%100) '), ('m', 'Metre'), ('m2', 'Metre kare'), ('m3', 'Metre küp'), ('1000 m3', '1000 Metre küp'), ('p/a', 'Çift'), ('p/st', 'Adet'), ('100 p/st', '100 Adet'), ('1000 p/st', '1000 Adet'), ('TJ', 'Terajul (Brüt kalori değeri)'), ('t. CO2', 'Ton CO2 (karbon dioksit) eşdeğeri'), ('n/a', 'Not specified')], default='n/a', help_text='Item metric unit', max_length=50, verbose_name='Metric Unit')),
                ('tax_limit', models.FloatField(blank=True, default=0, help_text='Item Tax Limit', verbose_name='Tax Limit')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='tariff.tariff')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('position_number',), name='position_number_uniquie_constraint', nulls_distinct=True)],
            },
        ),
    ]
